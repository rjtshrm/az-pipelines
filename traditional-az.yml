trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN: '$(GOPATH)/bin'
  GOPATH: '$(Agent.TempDirectory)/gopath'
  GoVersion: '1.23.4'
  repository: 'uservice'
  tag: '$(Build.BuildId)'
  containerRegistry: 'uservice'
  environment: 'staging'

jobs:
- job: Build
  displayName: Build
  steps:
  - task: Docker@2
    displayName: Build an image
    inputs:
      repository: $(repository)
      command: build
      dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
      tags: |
        $(tag)
  - task: SnykSecurityScan@1
    displayName: Code Analysis
    inputs:
      serviceConnectionEndpoint: 'Snyk_Analysis'
      testType: 'container'
      severityThreshold: 'low'
      dockerImageName: '$(repository):$(tag)'
      dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
      monitorWhen: 'always'
      failOnIssues: false
  - task: Docker@2
    displayName: Push an image
    inputs:
      containerRegistry: $(containerRegistry)
      repository: $(repository)
      command: buildAndPush
      tags: |
        $(tag)
  - task: CmdLine@2
    displayName: Clean docker resources
    inputs:
      script: 'docker system prune -a --force'

- job: CodeAnalysis
  displayName: Code Analysis (Code Quality & Security)
  variables:
    GOBIN: '$(GOPATH)/bin'
    GOPATH: '$(Agent.TempDirectory)/gopath'
    disable.coverage.autogenerate: 'false'
  steps:
  - task: SonarCloudPrepare@3
    displayName: SonarCloud Prepare
    inputs:
      SonarQube: 'SonarQube_Analysis'
      organization: 'rjtrjtshrm94'
      scannerMode: 'cli'
      configMode: 'manual'
      cliProjectKey: 'rjtrjtshrm94_MicroService'
      cliProjectName: 'MicroService'
      cliSources: '.'
  - task: SonarCloudAnalyze@3
  - task: SonarCloudPublish@3
    inputs:
      pollingTimeoutSec: '300'
  - task: GoTool@0
    displayName: Initialize Go Project
    inputs:
      version: $(GoVersion)
  - script: |
      ls $(GOPATH)
      ls $(GOBIN)
      set -e -x
      mkdir -p '$(GOPATH)/bin'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
      echo '##vso[task.prependpath]$(GOBIN)'
    displayName: 'Create Go Workspace'
  - task: SnykSecurityScan@1
    displayName: App Analysis
    inputs:
      serviceConnectionEndpoint: 'Snyk_Analysis'
      testType: 'app'
      severityThreshold: 'low'
      failOnIssues: false

- job: IntegrationsTest
  displayName: Integrations Test
  dependsOn: CodeAnalysis
  variables:
    GOBIN: '$(GOPATH)/bin'
    GOPATH: '$(Agent.TempDirectory)/gopath'
    disable.coverage.autogenerate: 'false'
  steps:
  - task: GoTool@0
    displayName: Initialize Go Project
    inputs:
      version: $(GoVersion)
  - script: |
      ls $(GOPATH)
      ls $(GOBIN)
      set -e -x
      mkdir -p '$(GOPATH)/bin'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
      echo '##vso[task.prependpath]$(GOBIN)'
    displayName: 'Create Go Workspace'
  - task: bash@3
    displayName: Tests & Coverage
    inputs:
      targetType: 'inline'
      script: |
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
        go install github.com/matm/gocov-html/cmd/gocov-html@latest
        go install github.com/jstemmer/go-junit-report/v2@latest
        go test -v -coverprofile=coverage.txt -covermode count $(Build.SourcesDirectory)/... 2>&1 | go-junit-report -set-exit-code > report.xml
        gocov convert coverage.txt > coverage.json
        gocov-html < coverage.json > coverage.html
        gocov-xml < coverage.json > coverage.xml
  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'report.xml'
  - task: UseDotNet@2
    displayName: '.NET Core sdk 7.0.x required for code coverage'
    inputs:
      version: 7.0.x
  - task: PublishCodeCoverageResults@2
    displayName: Publish code coverage
    inputs:
      pathToSources: $(System.DefaultWorkingDirectory)
      summaryFileLocation: coverage.xml
      failIfCoverageEmpty: true

- job: Deployment
  displayName: Deployment $(environment)
  steps:
  - task: bash@3
    displayName: 'Test $(environment) Deployment'
    inputs:
      targetType: 'inline'
      script: |
        echo "Testing $(environment) Deployment"